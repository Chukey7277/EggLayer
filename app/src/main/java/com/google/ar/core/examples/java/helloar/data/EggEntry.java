package com.google.ar.core.examples.java.helloar.data;

import androidx.annotation.Nullable;

import com.google.firebase.Timestamp;
import com.google.firebase.firestore.GeoPoint;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/** Firestore model for an egg entry (authoring). */
public class EggEntry {

    // ---------- Identity ----------
    public String id;
    public String userId;

    // ---------- Content ----------
    public String title;
    public String description;

    // Speech-to-text captured when authoring (optional)
    public @Nullable String speechTranscript;

    // ---------- Geospatial ----------
    public @Nullable GeoPoint geo;
    public @Nullable Double alt;
    public @Nullable Double heading;
    public @Nullable Double horizAcc;  // meters (horizontal accuracy)
    public @Nullable Double vertAcc;   // meters (vertical accuracy)

    // Pose snapshot (4x4 matrix flattened, length 16) — optional
    public @Nullable List<Float> poseMatrix;

    // ---------- Persistence / anchoring ----------
    /** One of: "CLOUD", "GEO", "LOCAL" (string for Firestore simplicity). */
    public @Nullable String anchorType;
    /** Cloud Anchor ID (present iff anchorType == "CLOUD"). */
    public @Nullable String cloudId;
    /** Days to live used when hosting (optional, for housekeeping/UX). */
    public @Nullable Integer cloudTtlDays;

    // ---------- Media (Storage paths or absolute URLs) ----------
    public @Nullable List<String> photoPaths;   // e.g., /eggs/{docId}/photos/photo_0.jpg
    public @Nullable String audioPath;          // e.g., /eggs/{docId}/audio/voice.m4a
    public @Nullable Boolean hasMedia;

    // Optional direct URLs (cache / convenience)
    public @Nullable String cardImageUrl;       // optional “hero” image URL or path
    public @Nullable String audioUrl;           // optional direct streamable URL

    // ---------- Quiz generated by Vertex AI (0..n) ----------
    public @Nullable List<QuizQuestion> quiz;

    // ---------- Timestamps ----------
    public @Nullable Timestamp createdAt;
    public @Nullable Timestamp updatedAt;

    // ---------- Collection / engagement ----------
    public @Nullable List<String> collectedBy;

    // ---------- Placement metadata ----------
    // Which reference image this poseMatrix is relative to (e.g., "plant_marker")
    public @Nullable String refImage;
    public @Nullable String placementType;   // "DepthPoint", "Point", "Plane", etc.
    public @Nullable Float  distanceFromCamera; // Distance in meters

    public EggEntry() {
        // Firestore needs a public no-arg constructor
    }

    // ---------- Convenience ----------
    public double lat() { return geo != null ? geo.getLatitude() : 0; }
    public double lng() { return geo != null ? geo.getLongitude() : 0; }
    public boolean hasQuiz() { return quiz != null && !quiz.isEmpty(); }

    public boolean isCloudAnchored() { return "CLOUD".equalsIgnoreCase(anchorType) && cloudId != null && !cloudId.isEmpty(); }
    public boolean isGeospatial()    { return "GEO".equalsIgnoreCase(anchorType) && geo != null; }

    // ---------- (Optional) constants to avoid typos ----------
    public static final class AnchorTypes {
        public static final String CLOUD = "CLOUD";
        public static final String GEO   = "GEO";
        public static final String LOCAL = "LOCAL";
        private AnchorTypes() {}
    }

    /**
     * Try to parse a quiz payload that came back from Firestore:
     *  • Either a List<Map<String,Object>> (preferred)
     *  • Or a JSON string: [{"question": "...","options": ["a","b"],"correctIndex": 1}, ...]
     */
    @SuppressWarnings("unchecked")
    @Nullable
    public static List<QuizQuestion> parseQuizFromFirestore(@Nullable Object raw) {
        if (raw == null) return null;

        // Case 1: Array of maps (typical Firestore structured data)
        if (raw instanceof List<?>) {
            List<?> arr = (List<?>) raw;
            List<QuizQuestion> out = new ArrayList<>();
            for (Object o : arr) {
                if (!(o instanceof Map)) continue;
                Map<String, Object> m = (Map<String, Object>) o;

                QuizQuestion q = new QuizQuestion();
                Object qText = m.get("question");
                Object opts  = m.get("options");
                Object idx   = m.get("correctIndex");

                q.question = (qText instanceof String) ? (String) qText : null;

                if (opts instanceof List<?>) {
                    List<?> rawOpts = (List<?>) opts;
                    q.options = new ArrayList<>();
                    for (Object ro : rawOpts) {
                        if (ro instanceof String) q.options.add((String) ro);
                    }
                }

                if (idx instanceof Number) q.correctIndex = ((Number) idx).intValue();

                if (q.isPlausible()) out.add(q);
            }
            return out.isEmpty() ? null : out;
        }

        // Case 2: JSON string
        if (raw instanceof String) {
            String s = (String) raw;
            try {
                JSONArray arr = new JSONArray(s);
                List<QuizQuestion> out = new ArrayList<>();
                for (int i = 0; i < arr.length(); i++) {
                    JSONObject obj = arr.optJSONObject(i);
                    if (obj == null) continue;

                    QuizQuestion q = new QuizQuestion();
                    q.question = obj.optString("question", null);

                    JSONArray ja = obj.optJSONArray("options");
                    if (ja != null) {
                        q.options = new ArrayList<>();
                        for (int j = 0; j < ja.length(); j++) {
                            String opt = ja.optString(j, null);
                            if (opt != null) q.options.add(opt);
                        }
                    }

                    if (obj.has("correctIndex")) {
                        q.correctIndex = obj.optInt("correctIndex", 0);
                    }

                    if (q.isPlausible()) out.add(q);
                }
                return out.isEmpty() ? null : out;
            } catch (JSONException ignored) {
                // fall through
            }
        }

        // Unknown shape
        return null;
    }

    /** Single multiple-choice question. */
    public static class QuizQuestion {
        public String question;         // e.g., “Paris is the capital of ____.”
        public List<String> options;    // choices (size >= 2)
        public Integer correctIndex;    // index into options (0-based)

        public QuizQuestion() {}        // Firestore needs no-arg

        public boolean isPlausible() {
            return question != null
                    && options != null
                    && options.size() >= 2
                    && correctIndex != null
                    && correctIndex >= 0
                    && correctIndex < options.size();
        }
    }
}
